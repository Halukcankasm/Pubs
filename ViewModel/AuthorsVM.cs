using Pubs.Model;
using SQLDBHelper;
using System;using System.Collections.Generic;
using System.Collections.ObjectModel;using System.Data;using System.Data.SqlClient;using MessageBox = System.Windows.MessageBox;namespace Pubs.ViewModel{	public class AuthorsVM	{
		#region Properties        private SqlConnection cnn;		public List<Authors> authorsList;

		#endregion Properties
		public AuthorsVM()		{			authorsList = new List<Authors>();		}		public List<Authors> SelectAllauthors()		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_authorsT]";
				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					Authors authors = new Authors();					authors.Au_id = SqlHelper.GetNullableString(dr, "au_id");					authors.Au_lname = SqlHelper.GetNullableString(dr, "au_lname");					authors.Au_fname = SqlHelper.GetNullableString(dr, "au_fname");					authors.Phone = SqlHelper.GetNullableString(dr, "phone");					authors.Address = SqlHelper.GetNullableString(dr, "address");					authors.City = SqlHelper.GetNullableString(dr, "city");					authors.State = SqlHelper.GetNullableString(dr, "state");					authors.Zip = SqlHelper.GetNullableString(dr, "zip");					authors.Contract = dr.GetBoolean(dr.GetOrdinal("contract"));
					authorsList.Add(authors);				}
				return authorsList;			}
			return null;		}		public void Insertauthors(Authors authors)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[ins_authors]";

				cmd.Parameters.Add("@au_id", SqlDbType.VarChar).Value = authors.Au_id;				cmd.Parameters.Add("@au_lname", SqlDbType.VarChar).Value = authors.Au_lname;				cmd.Parameters.Add("@au_fname", SqlDbType.VarChar).Value = authors.Au_fname;				cmd.Parameters.Add("@phone", SqlDbType.Char).Value = authors.Phone;				cmd.Parameters.Add("@address", SqlDbType.VarChar).Value = authors.Address;				cmd.Parameters.Add("@city", SqlDbType.VarChar).Value = authors.City;				cmd.Parameters.Add("@state", SqlDbType.Char).Value = authors.State;				cmd.Parameters.Add("@zip", SqlDbType.Char).Value = authors.Zip;				cmd.Parameters.Add("@contract", SqlDbType.Bit).Value = authors.Contract;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Deleteauthors(int authorsId)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[del_authors]";
				cmd.Parameters.Add("@authorsId", SqlDbType.Int).Value = authorsId;

				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Updateauthors(Authors authors)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[upd_authors]";

				cmd.Parameters.Add("@au_id", SqlDbType.VarChar).Value = authors.Au_id;				cmd.Parameters.Add("@au_lname", SqlDbType.VarChar).Value = authors.Au_lname;				cmd.Parameters.Add("@au_fname", SqlDbType.VarChar).Value = authors.Au_fname;				cmd.Parameters.Add("@phone", SqlDbType.Char).Value = authors.Phone;				cmd.Parameters.Add("@address", SqlDbType.VarChar).Value = authors.Address;				cmd.Parameters.Add("@city", SqlDbType.VarChar).Value = authors.City;				cmd.Parameters.Add("@state", SqlDbType.Char).Value = authors.State;				cmd.Parameters.Add("@zip", SqlDbType.Char).Value = authors.Zip;				cmd.Parameters.Add("@contract", SqlDbType.Bit).Value = authors.Contract;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void OpenDatabase()		{			try			{				cnn = new SqlConnection("server=LAPTOP-S65PUQCG\\SQLEXPRESS01; database=pubs; integrated security=true");				cnn.Open();			}			catch (Exception ex)			{				MessageBox.Show($"Database bağlanırken sorun oluştu!.\n{ex.Message}", "Error");			}		}	}}