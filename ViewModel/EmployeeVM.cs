using Pubs.Model;
using SQLDBHelper;
using System;using System.Collections.Generic;
using System.Collections.ObjectModel;using System.Data;using System.Data.SqlClient;using MessageBox = System.Windows.MessageBox;namespace Pubs.ViewModel{	public class EmployeeVM	{		#region Properties		private SqlConnection cnn;		public List<Employee> EmployeeList;		#endregion Properties		public EmployeeVM()		{			//employeeList = new List<employee>();		}		public List<Employee> GetAllemployee()		{			EmployeeList =  new List<Employee>();			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_employee]"; 				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					Employee employee = new Employee();					employee.Emp_id = SqlHelper.GetNullableString(dr, "emp_id");					employee.Fname = SqlHelper.GetNullableString(dr, "fname");					employee.Minit = SqlHelper.GetNullableString(dr, "minit");					employee.Lname = SqlHelper.GetNullableString(dr, "lname");					employee.Job_id = dr.GetInt32(dr.GetOrdinal("job_id"));					employee.Job_lvl = SqlHelper.GetNullableByte(dr, "job_lvl");					employee.Pub_id = SqlHelper.GetNullableString(dr, "pub_id");					employee.Hire_date = dr.GetDateTime(dr.GetOrdinal("hire_date"));					EmployeeList.Add(employee);				}			}			return EmployeeList;		}


		public List<EmployeeDetail> GetAllemployeeDetail(string Name)		{			var EmployeeDetailList = new List<EmployeeDetail>();			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_EmployeDetailByName]";
				cmd.Parameters.Add("@Name", SqlDbType.NVarChar).Value = Name;
				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					EmployeeDetail employee = new EmployeeDetail();					employee.Emp_id = SqlHelper.GetNullableString(dr, "emp_id");					employee.Fname = SqlHelper.GetNullableString(dr, "fname");					employee.Minit = SqlHelper.GetNullableString(dr, "minit");					employee.Lname = SqlHelper.GetNullableString(dr, "lname");					employee.Job_id = dr.GetInt16(dr.GetOrdinal("job_id"));					employee.Job_lvl = SqlHelper.GetNullableByte(dr, "job_lvl");					employee.Pub_id = SqlHelper.GetNullableString(dr, "pub_id");					employee.Hire_date = dr.GetDateTime(dr.GetOrdinal("hire_date"));					employee.Job_desc = SqlHelper.GetNullableString(dr, "job_desc");					EmployeeDetailList.Add(employee);				}			}			return EmployeeDetailList;		}		public void Insertemployee(Employee employee)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[ins_employee]"; 				cmd.Parameters.Add("@emp_id", SqlDbType.Char).Value = employee.Emp_id;				cmd.Parameters.Add("@fname", SqlDbType.VarChar).Value = employee.Fname;				cmd.Parameters.Add("@minit", SqlDbType.Char).Value = employee.Minit;				cmd.Parameters.Add("@lname", SqlDbType.VarChar).Value = employee.Lname;				cmd.Parameters.Add("@job_id", SqlDbType.SmallInt).Value = employee.Job_id;				cmd.Parameters.Add("@job_lvl", SqlDbType.TinyInt).Value = employee.Job_lvl;				cmd.Parameters.Add("@pub_id", SqlDbType.Char).Value = employee.Pub_id;				cmd.Parameters.Add("@hire_date", SqlDbType.DateTime).Value = employee.Hire_date;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Deleteemployee(int employeeId)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[del_employee]"; 				cmd.Parameters.Add("@employeeId", SqlDbType.Int).Value = employeeId; 				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Updateemployee(Employee employee)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[upd_employee]"; 				cmd.Parameters.Add("@emp_id", SqlDbType.Char).Value = employee.Emp_id;				cmd.Parameters.Add("@fname", SqlDbType.VarChar).Value = employee.Fname;				cmd.Parameters.Add("@minit", SqlDbType.Char).Value = employee.Minit;				cmd.Parameters.Add("@lname", SqlDbType.VarChar).Value = employee.Lname;				cmd.Parameters.Add("@job_id", SqlDbType.SmallInt).Value = employee.Job_id;				cmd.Parameters.Add("@job_lvl", SqlDbType.TinyInt).Value = employee.Job_lvl;				cmd.Parameters.Add("@pub_id", SqlDbType.Char).Value = employee.Pub_id;				cmd.Parameters.Add("@hire_date", SqlDbType.DateTime).Value = employee.Hire_date;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void OpenDatabase()		{			try			{				cnn = new SqlConnection("server=LAPTOP-S65PUQCG\\SQLEXPRESS01; database=pubs; integrated security=true");				cnn.Open();			}			catch (Exception ex)			{				MessageBox.Show($"Database bağlanırken sorun oluştu!.\n{ex.Message}", "Error");			}		}	}}