using SQLDBHelper;
using System;using System.Collections.Generic;
using System.Collections.ObjectModel;using System.Data;using System.Data.SqlClient;using MessageBox = System.Windows.MessageBox;namespace Pubs.Model{	public class SalesVM	{		#region Properties		private SqlConnection cnn;		public List<Sales> SalesList;		#endregion Properties		public  SalesVM()		{			//salesList = new List<sales>();		}		public List<Sales> GetAllsales()		{			var SalesList =  new List<Sales>();			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_sales]"; 				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					Sales sales = new Sales();					sales.Stor_id = SqlHelper.GetNullableString(dr, "stor_id");					sales.Ord_num = SqlHelper.GetNullableString(dr, "ord_num");					sales.Ord_date = dr.GetDateTime(dr.GetOrdinal("ord_date"));					sales.Qty = dr.GetInt16(dr.GetOrdinal("qty"));					sales.Payterms = SqlHelper.GetNullableString(dr, "payterms");					sales.Title_id = SqlHelper.GetNullableString(dr, "title_id");					SalesList.Add(sales);				}			}			return SalesList;		}


		public List<SalesDetail> GetSalesDetailWithColumn(SalesCriteria salesCriteria)		{			var SalesList = new List<SalesDetail>();			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_SalesDetailByColumn]";
				cmd.Parameters.Add("@ord_date", SqlDbType.DateTime).Value = salesCriteria.Ord_date;
				cmd.Parameters.Add("@stor_name", SqlDbType.VarChar).Value = salesCriteria.Str_name;
				cmd.Parameters.Add("@title_type", SqlDbType.VarChar).Value = salesCriteria.Title_type;
				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					SalesDetail sales = new SalesDetail();					sales.Store_id = SqlHelper.GetNullableString(dr, "stor_id");					sales.Ord_num = SqlHelper.GetNullableString(dr, "ord_num");					sales.Ord_date = dr.GetDateTime(dr.GetOrdinal("ord_date"));					sales.Qty = dr.GetInt16(dr.GetOrdinal("qty"));					sales.Payterms = SqlHelper.GetNullableString(dr, "payterms");					sales.Title_id = dr.GetString(dr.GetOrdinal("title_id"));					sales.Stor_name = SqlHelper.GetNullableString(dr, "stor_name");					sales.Title = dr.GetString(dr.GetOrdinal("title"));					sales.TitleType = SqlHelper.GetNullableString(dr, "type");					sales.Price = SqlHelper.GetNullableDecimal(dr, "price");					SalesList.Add(sales);				}			}			return SalesList;		}

		public List<string> SelectStoreNames()
		{
			var StoresNames = new List<string>();			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[sel_StoreName]";
				SqlDataReader dr = cmd.ExecuteReader();				while (dr.Read())				{					string storeName = "";					storeName = SqlHelper.GetNullableString(dr, "store_name");					StoresNames.Add(storeName);				}			}			return StoresNames;
		}

		public void InsertSales(Sales sales)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[ins_sales]"; 				cmd.Parameters.Add("@stor_id", SqlDbType.Char).Value = sales.Stor_id;				cmd.Parameters.Add("@ord_num", SqlDbType.VarChar).Value = sales.Ord_num;				cmd.Parameters.Add("@ord_date", SqlDbType.DateTime).Value = sales.Ord_date;				cmd.Parameters.Add("@qty", SqlDbType.SmallInt).Value = sales.Qty;				cmd.Parameters.Add("@payterms", SqlDbType.VarChar).Value = sales.Payterms;				cmd.Parameters.Add("@title_id", SqlDbType.VarChar).Value = sales.Title_id;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Deletesales(int salesId)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[del_sales]"; 				cmd.Parameters.Add("@salesId", SqlDbType.Int).Value = salesId; 				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void Updatesales(Sales sales)		{			OpenDatabase();			if (cnn.State == ConnectionState.Open)			{				SqlCommand cmd = new SqlCommand();				cmd.Connection = cnn;				cmd.CommandType = CommandType.StoredProcedure;				cmd.CommandText = "[dbo].[upd_sales]"; 				cmd.Parameters.Add("@stor_id", SqlDbType.Char).Value = sales.Stor_id;				cmd.Parameters.Add("@ord_num", SqlDbType.VarChar).Value = sales.Ord_num;				cmd.Parameters.Add("@ord_date", SqlDbType.DateTime).Value = sales.Ord_date;				cmd.Parameters.Add("@qty", SqlDbType.SmallInt).Value = sales.Qty;				cmd.Parameters.Add("@payterms", SqlDbType.VarChar).Value = sales.Payterms;				cmd.Parameters.Add("@title_id", SqlDbType.VarChar).Value = sales.Title_id;				var result = cmd.ExecuteNonQuery();				cnn.Close();			}		}		public void OpenDatabase()		{			try			{				cnn = new SqlConnection("server=LAPTOP-S65PUQCG\\SQLEXPRESS01; database=pubs; integrated security=true");				cnn.Open();			}			catch (Exception ex)			{				MessageBox.Show($"Database bağlanırken sorun oluştu!.\n{ex.Message}", "Error");			}		}	}}